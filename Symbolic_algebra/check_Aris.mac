depends(ur,   [r, phi, x[3]]);
depends(uphi, [r, phi, x[3]]);
depends(uz,   [r, phi, x[3]]);
depends(r,   [x[1], x[2]]);
depends(phi, [x[1], x[2]]);

u[1] : ur*cos(phi) - uphi*sin(phi);
u[2] : ur*sin(phi) + uphi*cos(phi);
u[3] : uz;

for i : 1 thru 3 do
(
   for j : 1 thru 3 do
   (
      G[i,j] : diff(u[i], x[j]),
      G[i,j] : subst(cos(phi),    'diff(r,   x[1]), G[i,j]),
      G[i,j] : subst(sin(phi),    'diff(r,   x[2]), G[i,j]),
      G[i,j] : subst(-sin(phi)/r, 'diff(phi, x[1]), G[i,j]),
      G[i,j] : subst( cos(phi)/r, 'diff(phi, x[2]), G[i,j])
    )
);

for i : 1 thru 3 do
(
   for j : 1 thru 3 do
   (
      e[i,j] : expand(1/2 * (G[i, j] + G[j, i]))
    )
);

/* This is a check */
dilatation : trigsimp(G[1,1] + G[2,2] + G[3,3]);

for i : 1 thru 3 do
(
   for j : 1 thru 3 do
   (
      div_e[i,j,j] : diff(e[i,j], x[j]),
      div_e[i,j,j] : subst(cos(phi),    'diff(r,   x[1]), div_e[i,j,j]),
      div_e[i,j,j] : subst(sin(phi),    'diff(r,   x[2]), div_e[i,j,j]),
      div_e[i,j,j] : subst(-sin(phi)/r, 'diff(phi, x[1]), div_e[i,j,j]),
      div_e[i,j,j] : subst( cos(phi)/r, 'diff(phi, x[2]), div_e[i,j,j])
    )
)$


/* Viscous force */
for i : 1 thru 3 do
(
   f[i] : 0,
   for j : 1 thru 3 do
   (
      f[i] : f[i] + div_e[i, j, j]
   )
)$

fr   :  f[1]*cos(phi) + f[2]*sin(phi);
fphi : -f[1]*sin(phi) + f[2]*cos(phi);
fz   :  f[3];

fr   : trigsimp(fr);
fphi : trigsimp(fphi);
fz   : trigsimp(fz);

for i : 1 thru 3 do
(
   fr   : subst(z, x[3], fr),
   fphi : subst(z, x[3], fphi),
   fz   : subst(z, x[3], fz  )
);

/* Uses Rutherford Aris expressions */

depends(vr,   [y[1], y[2], y[3]]);
depends(vphi, [y[1], y[2], y[3]]);
depends(vz,   [y[1], y[2], y[3]]);

/* Physical components of the strain.  p. 181 */
T[1,1] : diff(vr,y[1]); /* checked */
T[2,3] : 1/2 * (diff(vphi,y[3]) + 1/y[1]*diff(vz, y[2])); /* checked */
T[3,2] : T[2,3];
T[2,2] : 1/y[1]*diff(vphi,y[2]) + vr/y[1]; /* checked */
T[3,1] : 1/2 * (diff(vz,y[1]) + diff(vr,y[3])); /* checked */
T[1,3] : T[3,1];
T[3,3] : diff(vz,y[3]); /* checked */
T[1,2] : 1/2 * (1/y[1]*diff(vr,y[2]) + diff(vphi,y[1]) - vphi/y[1]); /* checked */
T[2,1] : T[1,2];

h[1] : 1;
h[2] : y[1];
h[3] : 1;
hprod : h[1]*h[2]*h[3];

/* Christoffel symbol */
for i : 1 thru 3 do
(
   for j : 1 thru 3 do
   (
      for k : 1 thru 3 do
      (
         Gamma[i, j, k] : 0
      )
   )
);

/* p. 165 */
Gamma[1,2,2] : -y[1];
Gamma[2,1,2] : 1/y[1];
Gamma[2,2,1] : 1/y[1];

/* pg. 179 */
for i : 1 thru 3 do
(
   for j : 1 thru 3 do
   (
      term2[i, j] : 0,
      for k : 1 thru 3 do
      (
         term2[i,j] : term2[i,j] + h[i]/(h[j]*h[k]) * Gamma[i,j,k] * T[j,k]
      ),
      bracket[i,j] : hprod/(h[i]*h[j]) * T[i,j]
   )
);

for i : 1 thru 3 do
(
   f_aris[i] : 0,
   for j : 1 thru 3 do
   (
      f_aris[i] : f_aris[i] + h[i]/hprod*diff(bracket[i,j], y[j]) + term2[i,j]
   )
);

for i : 1 thru 3 do
(
   f_aris[i] : subst(r,   y[1], f_aris[i]),
   f_aris[i] : subst(phi, y[2], f_aris[i]),
   f_aris[i] : subst(z,   y[3], f_aris[i]),
   
   f_aris[i] : subst(ur,   vr,   f_aris[i]),
   f_aris[i] : subst(uphi, vphi, f_aris[i]),
   f_aris[i] : subst(uz,   vz,   f_aris[i])   
);

f_aris_r   : expand(f_aris[1]);
f_aris_phi : expand(f_aris[2]);
f_aris_z   : expand(f_aris[3]);

diff_r   : expand(f_aris_r   - fr);
diff_phi : expand(f_aris_phi - fphi);
diff_z   : expand(f_aris_z   - fz);


